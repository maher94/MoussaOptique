{"ast":null,"code":"import axios from 'axios';\nexport const sendDelete = (userId, OrderType) => {\n  const baseUrl = `http://localhost:4000/orders` + OrderType + `/delete/` + userId;\n  axios.get(baseUrl).then(response => {\n    if (response.data.success) {\n      alert(response.data.message);\n    }\n  }).catch(error => {\n    alert(\"Error on delete item\");\n  });\n};\nexport const sendCreate = (orderdate, Category, Products, Status, Comment, qte, pss, OrderType) => {\n  // url de backend\n  const baseUrl = \"http://localhost:4000/orders\" + OrderType + \"/create\"; // parameter data post\n\n  if (OrderType == \"Produit\") {\n    const datapost = {\n      Orderdate: orderdate,\n      Category: Category,\n      Products: Products,\n      Status: Status,\n      Comment: Comment,\n      qte: qte,\n      volume: pss\n    };\n    axios.post(baseUrl, datapost).then(response => {\n      if (response.data.success) {\n        alert(response.data.message);\n      } else {\n        alert(\"Error when creating a new order \");\n      }\n    }).catch(error => {\n      alert(error);\n      console.log(error);\n    });\n  } else {\n    const datapost = {\n      Orderdate: orderdate,\n      Category: Category,\n      Products: Products,\n      Status: Status,\n      Comment: Comment,\n      qte: qte,\n      pss: pss\n    };\n    axios.post(baseUrl, datapost).then(response => {\n      if (response.data.success) {\n        alert(response.data.message);\n      } else {\n        alert(\"Error when creating a new order \");\n      }\n    }).catch(error => {\n      alert(error);\n      console.log(error);\n    });\n  }\n};\nexport const updateStatus = (orderid, OrderType) => {\n  // url de backend\n  const baseUrl = \"http://localhost:4000/orders\" + OrderType + \"/updateStatus/\" + orderid; // parameter data post\n\n  const datapost = {\n    Status: \"WaitingValidation\"\n  };\n  axios.post(baseUrl, datapost).then(response => {\n    if (response.data.success) {\n      alert(response.data.message);\n    } else {\n      alert(\"Error when updating status \");\n    }\n  }).catch(error => {\n    alert(error);\n    console.log(error);\n  });\n};\nexport const sendUpdate = (Orderdate, Category, Products, Status, Comment, qte, pss, orderid, OrderType) => {\n  // url de backend\n  const baseUrl = \"http://localhost:4000/orders\" + OrderType + \"/update/\" + orderid; // parameter data post\n\n  if (OrderType == \"Produit\") {\n    const datapost = {\n      Orderdate: Orderdate,\n      Category: Category,\n      Products: Products,\n      Status: Status,\n      Comment: Comment,\n      qte: qte,\n      volume: pss\n    };\n    axios.post(baseUrl, datapost).then(response => {\n      if (response.data.success) {\n        alert(response.data.message);\n      } else {\n        alert(\"Error when updating data\");\n      }\n    }).catch(error => {\n      alert(error);\n      console.log(error);\n    });\n  } else {\n    const datapost = {\n      Orderdate: Orderdate,\n      Category: Category,\n      Products: Products,\n      Status: Status,\n      Comment: Comment,\n      qte: qte,\n      pss: pss\n    };\n    axios.post(baseUrl, datapost).then(response => {\n      if (response.data.success) {\n        alert(response.data.message);\n      } else {\n        alert(\"Error when updating data\");\n      }\n    }).catch(error => {\n      alert(error);\n      console.log(error);\n    });\n  }\n};\nexport const getCountNborders = OrderType => {\n  axios.get('http://localhost:4000/orders' + OrderType + '/countall').then(function (response) {\n    // handle success\n    return response.data.count;\n  }).catch(function (error) {\n    console.log(error);\n  });\n};\nexport default {\n  sendDelete,\n  sendCreate\n};","map":{"version":3,"sources":["C:/Users/mamoussa/project/moc/src/views/Orders/OrderManagement/api/OrderAPI.js"],"names":["axios","sendDelete","userId","OrderType","baseUrl","get","then","response","data","success","alert","message","catch","error","sendCreate","orderdate","Category","Products","Status","Comment","qte","pss","datapost","Orderdate","volume","post","console","log","updateStatus","orderid","sendUpdate","getCountNborders","count"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\n \r\n \r\nexport const  sendDelete=(userId,OrderType)=>{\r\n    \r\n    const baseUrl = `http://localhost:4000/orders`+OrderType+`/delete/`+userId   \r\n     \r\n    axios.get(baseUrl)\r\n    .then(response =>{\r\n      if (response.data.success) {\r\n        alert(response.data.message)\r\n      }\r\n    })\r\n    .catch ( error => {\r\n      alert(\"Error on delete item\")\r\n    })\r\n  }\r\n  export const  sendCreate=(orderdate,Category,Products,Status,Comment,qte,pss,OrderType)=>{\r\n\r\n   \r\n    // url de backend\r\n    const baseUrl = \"http://localhost:4000/orders\"+OrderType+\"/create\"\r\n    // parameter data post\r\n    if(OrderType==\"Produit\"){\r\n    const datapost = {\r\n      Orderdate:orderdate,\r\n      Category:Category,\r\n      Products:Products,\r\n      Status:Status,\r\n      Comment:Comment,\r\n      qte:qte,\r\n      volume:pss,\r\n       \r\n    }\r\n    axios.post(baseUrl,datapost)\r\n    .then(response => {\r\n      if (response.data.success) {\r\n       alert(response.data.message)\r\n      }\r\n      else {\r\n        alert(\"Error when creating a new order \")\r\n       \r\n      }\r\n    })\r\n    .catch ( error => {\r\n      alert(error)\r\n      console.log(error)\r\n    })\r\n  }\r\n  else {\r\n\r\n    const datapost = {\r\n      Orderdate:orderdate,\r\n      Category:Category,\r\n      Products:Products,\r\n      Status:Status,\r\n      Comment:Comment,\r\n      qte:qte,\r\n      pss:pss,\r\n       \r\n    }\r\n    axios.post(baseUrl,datapost)\r\n    .then(response => {\r\n      if (response.data.success) {\r\n       alert(response.data.message)\r\n      }\r\n      else {\r\n        alert(\"Error when creating a new order \")\r\n       \r\n      }\r\n    })\r\n    .catch ( error => {\r\n      alert(error)\r\n      console.log(error)\r\n    })\r\n\r\n  }\r\n  \r\n   \r\n  \r\n  }\r\n  export const  updateStatus=(orderid,OrderType)=>{\r\n\r\n\r\n   \r\n    // url de backend\r\n    const baseUrl = \"http://localhost:4000/orders\"+OrderType+\"/updateStatus/\"+orderid\r\n    // parameter data post\r\n    const datapost = {\r\n      Status:\"WaitingValidation\",\r\n          \r\n    }\r\n  \r\n    axios.post(baseUrl,datapost)\r\n    .then(response => {\r\n      if (response.data.success) {\r\n       \r\n       alert(response.data.message)\r\n      }\r\n      else {\r\n        alert(\"Error when updating status \")\r\n       \r\n      }\r\n    })\r\n    .catch ( error => {\r\n      alert(error)\r\n      console.log(error)\r\n    })\r\n  \r\n  }\r\n  \r\nexport const  sendUpdate=(Orderdate,Category,Products,Status,Comment,qte,pss,orderid,OrderType)=>{\r\n\r\n   \r\n    // url de backend\r\n    const baseUrl = \"http://localhost:4000/orders\"+OrderType+\"/update/\"+orderid\r\n    // parameter data post\r\n    if(OrderType==\"Produit\"){\r\n    const datapost = {\r\n      Orderdate:Orderdate,\r\n      Category:Category,\r\n      Products:Products,\r\n      Status:Status,\r\n      Comment:Comment,\r\n      qte:qte,\r\n      volume:pss,\r\n       \r\n    }\r\n  \r\n    axios.post(baseUrl,datapost)\r\n    .then(response => {\r\n      if (response.data.success) {\r\n       alert(response.data.message)\r\n      }\r\n      else {\r\n        alert(\"Error when updating data\")\r\n       \r\n      }\r\n    })\r\n    .catch ( error => {\r\n      alert(error)\r\n      console.log(error)\r\n    })}\r\n    else {\r\n      const datapost = {\r\n        Orderdate:Orderdate,\r\n        Category:Category,\r\n        Products:Products,\r\n        Status:Status,\r\n        Comment:Comment,\r\n        qte:qte,\r\n        pss:pss,\r\n         \r\n      }\r\n    \r\n      axios.post(baseUrl,datapost)\r\n      .then(response => {\r\n        if (response.data.success) {\r\n         alert(response.data.message)\r\n        }\r\n        else {\r\n          alert(\"Error when updating data\")\r\n         \r\n        }\r\n      })\r\n      .catch ( error => {\r\n        alert(error)\r\n        console.log(error)\r\n      })\r\n\r\n\r\n    }\r\n  \r\n  }\r\n  \r\n  export const getCountNborders=(OrderType) =>{\r\n  \r\n   \r\n    \r\n    axios.get('http://localhost:4000/orders'+OrderType+'/countall')\r\n  .then(function (response) {\r\n    // handle success\r\n   \r\n   return response.data.count;\r\n    \r\n   \r\n  })\r\n  .catch(function (error) {\r\n    \r\n    console.log(error);\r\n  })\r\n\r\n \r\n  }\r\n \r\n\r\n  export default  {sendDelete,sendCreate}\r\n "]},"metadata":{},"sourceType":"module"}